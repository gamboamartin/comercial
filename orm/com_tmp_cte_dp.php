<?php
namespace gamboamartin\comercial\models;

use base\orm\_modelo_parent;
use gamboamartin\direccion_postal\models\dp_calle;
use gamboamartin\direccion_postal\models\dp_calle_pertenece;
use gamboamartin\direccion_postal\models\dp_colonia;
use gamboamartin\direccion_postal\models\dp_colonia_postal;
use gamboamartin\direccion_postal\models\dp_cp;
use gamboamartin\direccion_postal\models\dp_estado;
use gamboamartin\direccion_postal\models\dp_municipio;
use gamboamartin\direccion_postal\models\dp_pais;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class com_tmp_cte_dp extends _modelo_parent{

    public function __construct(PDO $link, array $childrens = array()){
        $this->es_sincronizable = true;
        $tabla = 'com_tmp_cte_dp';
        $columnas = array($tabla=>false);
        $campos_obligatorios = array();
        $childrens = array();
        $columnas_extra = array();

        $campos_view['com_cliente_id'] = array('type' => 'selects', 'model' => new com_cliente($link));
        $campos_view['dp_pais_id'] = array('type' => 'selects', 'model' => new dp_pais($link));
        $campos_view['dp_estado_id'] = array('type' => 'selects', 'model' => new dp_estado($link));
        $campos_view['dp_municipio_id'] = array('type' => 'selects', 'model' => new dp_municipio($link));
        $campos_view['dp_cp_id'] = array('type' => 'selects', 'model' => new dp_cp($link));
        $campos_view['dp_colonia_id'] = array('type' => 'selects', 'model' => new dp_colonia($link));
        $campos_view['dp_calle_id'] = array('type' => 'selects', 'model' => new dp_calle($link));
        $campos_view['dp_colonia_postal_id'] = array('type' => 'selects', 'model' => new dp_colonia_postal($link));
        $campos_view['dp_calle_pertenece_id'] = array('type' => 'selects', 'model' => new dp_calle_pertenece($link));
        $campos_view['dp_pais'] = array('type' => 'inputs');
        $campos_view['dp_estado'] = array('type' => 'inputs');
        $campos_view['dp_municipio'] = array('type' => 'inputs');
        $campos_view['dp_cp'] = array('type' => 'inputs');
        $campos_view['dp_colonia'] = array('type' => 'inputs');
        $campos_view['dp_calle'] = array('type' => 'inputs');


        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, campos_view: $campos_view, columnas_extra: $columnas_extra, childrens: $childrens);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Temporales Dom';

    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $keys_init[] = 'dp_pais';
        $keys_init[] = 'dp_estado';
        $keys_init[] = 'dp_municipio';
        $keys_init[] = 'dp_cp';
        $keys_init[] = 'dp_colonia';
        $keys_init[] = 'dp_calle';

        foreach ($keys_init as $key){
            if(!isset($this->registro[$key]) || trim($this->registro[$key]) === ''){
                $this->registro[$key] = 'PENDIENTE';
            }
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->registro['com_cliente_id'].' ';

            foreach ($keys_init as $key){
                $descripcion .= $this->registro[$key].' ';
            }


            $this->registro['descripcion'] = $descripcion;
        }

        $r_alta_bd = parent::alta_bd($keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }
        return $r_alta_bd;
    }

    private function asigna_calle_pertenece(array $filtro, array $tmp_upd){
        $r_dp_calle_pertenece = (new dp_calle_pertenece(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $r_dp_calle_pertenece);
        }
        $dp_calle_pertenece_id = $r_dp_calle_pertenece->registros[0]['dp_calle_pertenece_id'];
        $tmp_upd['dp_calle_pertenece_id'] = $dp_calle_pertenece_id;
        return $tmp_upd;
    }

    private function asigna_colonia_postal(array $filtro, array $tmp_upd){
        $r_dp_colonia_postal = (new dp_colonia_postal(link: $this->link))->filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $r_dp_colonia_postal);
        }
        $dp_colonia_postal_id = $r_dp_colonia_postal->registros[0]['dp_colonia_postal_id'];
        $tmp_upd['dp_colonia_postal_id'] = $dp_colonia_postal_id;
        return $tmp_upd;
    }

    private function existe_data_key(array $keys, stdClass $tmp): bool
    {
        $existe_data = true;
        foreach ($keys as $key){
            if(isset($tmp->$key) && (int)$tmp->$key >0 ){
                continue;
            }
            $existe_data = false;
            break;
        }
        return $existe_data;
    }

    private function get_dp_cp(array $filtro){
        $r_dp_cp = (new dp_cp(link: $this->link))->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener dp_cp', data: $r_dp_cp);
        }
        if($r_dp_cp->n_registros === 0){
            return $this->error->error(mensaje: 'Error no existe cp', data: $r_dp_cp);
        }
        return $r_dp_cp->registros[0];
    }

    private function get_tmp_cp(array $filtro){
        $dp_cp = $this->get_dp_cp(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener tmp_upd', data: $dp_cp);
        }
        $tmp_upd = $this->tmp_upd(dp_cp: $dp_cp);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
        }
        return $tmp_upd;
    }

    private function integra_calle_pertenece(array $filtro, array $tmp_upd){
        $existe_calle_pertenece = (new dp_calle_pertenece(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $existe_calle_pertenece);
        }
        if($existe_calle_pertenece){
            $tmp_upd = $this->asigna_calle_pertenece(filtro: $filtro, tmp_upd: $tmp_upd);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    private function integra_colonia_postal(array $filtro, array $tmp_upd){
        $existe_colonia_postal = (new dp_colonia_postal(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $existe_colonia_postal);
        }
        if($existe_colonia_postal){
            $tmp_upd = $this->asigna_colonia_postal(filtro: $filtro, tmp_upd: $tmp_upd);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    public function modifica_bd(array $registro, int $id, bool $reactiva = false, array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {

        $entidades = array();
        $entidades['dp_pais'] = new dp_pais(link: $this->link);
        $entidades['dp_estado'] = new dp_estado(link: $this->link);
        $entidades['dp_municipio'] = new dp_municipio(link: $this->link);
        $entidades['dp_cp'] = new dp_cp(link: $this->link);
        $entidades['dp_colonia'] = new dp_colonia(link: $this->link);
        $entidades['dp_calle'] = new dp_calle(link: $this->link);

        foreach ($entidades as $entidad){
            $key_id = $entidad->tabla.'_id';
            $key_descripcion = $entidad->tabla.'_descripcion';

            if(isset($registro[$key_id]) && (int)$registro[$key_id] > 1){
                $row_dp = $entidad->registro(registro_id: $registro[$key_id]);
                if(errores::$error){
                    return $this->error->error(mensaje: 'Error al obtener row_dp',data:  $row_dp);
                }
                $registro[$entidad->tabla] = $row_dp[$key_descripcion];
            }
        }


        $r_modifica_bd = parent::modifica_bd(registro: $registro,id:  $id,reactiva:  $reactiva,keys_integra_ds:  $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al r_modifica_bd',data:  $r_modifica_bd);
        }
        return $r_modifica_bd;
    }

    /**
     * Asigna los elementos para modificacion de un registro
     * @param array $dp_cp
     * @return array
     */
    private function tmp_upd(array $dp_cp): array
    {
        $tmp_upd['dp_pais_id'] = $dp_cp['dp_pais_id'];
        $tmp_upd['dp_estado_id'] = $dp_cp['dp_estado_id'];
        $tmp_upd['dp_municipio_id'] = $dp_cp['dp_municipio_id'];
        $tmp_upd['dp_cp_id'] = $dp_cp['dp_cp_id'];
        return $tmp_upd;
    }

    private function tmp_upd_data_calle(array $filtro, array $tmp_upd){
        $r_dp_calle = (new dp_calle(link: $this->link))->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener r_dp_calle', data: $r_dp_calle);
        }
        if($r_dp_calle->n_registros === 0){
            return $this->error->error(mensaje: 'Error no existe r_dp_calle', data: $r_dp_calle);
        }
        $dp_calle = $r_dp_calle->registros[0];
        $tmp_upd['dp_calle_id'] = $dp_calle['dp_calle_id'];
        return $tmp_upd;
    }

    private function tmp_upd_calle(stdClass $tmp, array $tmp_upd){
        $filtro = array();
        $dp_calle_descripcion = $tmp->dp_calle;
        $filtro['dp_calle.descripcion'] = $dp_calle_descripcion;

        $existe_dp_calle = (new dp_calle(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe',data:  $existe_dp_calle);
        }

        if($existe_dp_calle) {
            $tmp_upd = $this->tmp_upd_data_calle(filtro: $filtro,tmp_upd: $tmp_upd);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    private function tmp_upd_cp(stdClass $tmp, array $tmp_upd){
        $dp_cp_descripcion = $tmp->dp_cp;

        $filtro['dp_cp.descripcion'] = $dp_cp_descripcion;

        $existe_dp_cp = (new dp_cp(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe',data:  $existe_dp_cp);
        }


        if($existe_dp_cp) {
            $tmp_upd = $this->get_tmp_cp(filtro: $filtro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    private function tmp_upd_col(array $filtro, array $tmp_upd){
        $r_dp_colonia = (new dp_colonia(link: $this->link))->filtro_and(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener r_dp_colonia', data: $r_dp_colonia);
        }
        if($r_dp_colonia->n_registros === 0){
            return $this->error->error(mensaje: 'Error no existe cp', data: $r_dp_colonia);
        }
        $dp_colonia = $r_dp_colonia->registros[0];
        $tmp_upd['dp_colonia_id'] = $dp_colonia['dp_colonia_id'];
        return $tmp_upd;
    }

    private function tmp_upd_colonia(stdClass $tmp, array $tmp_upd){
        $filtro = array();
        $dp_colonia_descripcion = $tmp->dp_colonia;
        $filtro['dp_colonia.descripcion'] = $dp_colonia_descripcion;

        $existe_dp_colonia = (new dp_colonia(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe',data:  $existe_dp_colonia);
        }

        if($existe_dp_colonia) {

            $tmp_upd = $this->tmp_upd_col(filtro: $filtro,tmp_upd: $tmp_upd);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
            }
        }
        return $tmp_upd;
    }

    private function tmp_upd_colonia_postal(stdClass $tmp, array $tmp_upd){
        $keys = array();
        $keys[] = 'dp_pais_id';
        $keys[] = 'dp_estado_id';
        $keys[] = 'dp_municipio_id';
        $keys[] = 'dp_cp_id';
        $keys[] = 'dp_colonia_id';


        $existe_data_colonia_postal = $this->existe_data_key(keys: $keys,tmp: $tmp);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar si existe data', data: $existe_data_colonia_postal);
        }

        if($existe_data_colonia_postal){
            $filtro = array();
            $filtro['dp_colonia.id'] = $tmp->dp_colonia_id;
            $filtro['dp_cp.id'] = $tmp->dp_cp_id;


            $tmp_upd = $this->integra_colonia_postal(filtro: $filtro, tmp_upd: $tmp_upd);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
            }

        }
        return  $tmp_upd;
    }

    private function tmp_upd_calle_pertenece(stdClass $tmp, array $tmp_upd){
        $keys = array();
        $keys[] = 'dp_pais_id';
        $keys[] = 'dp_estado_id';
        $keys[] = 'dp_municipio_id';
        $keys[] = 'dp_cp_id';
        $keys[] = 'dp_colonia_id';
        $keys[] = 'dp_calle_id';
        $keys[] = 'dp_colonia_postal_id';


        $existe_data_calle_pertenece = $this->existe_data_key(keys: $keys,tmp: $tmp);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar si existe data', data: $existe_data_calle_pertenece);
        }


        if($existe_data_calle_pertenece){
            $filtro = array();
            $filtro['dp_colonia_postal.id'] = $tmp->dp_colonia_postal_id;
            $filtro['dp_calle.id'] = $tmp->dp_calle_id;


            $tmp_upd = $this->integra_calle_pertenece(filtro: $filtro, tmp_upd: $tmp_upd);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
            }

        }
        return $tmp_upd;
    }


    private function tmp_upd_data(stdClass $tmp){
        $tmp_upd = array();

        $tmp_upd = $this->tmp_upd_cp(tmp: $tmp,tmp_upd: $tmp_upd);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
        }


        $tmp_upd = $this->tmp_upd_colonia(tmp: $tmp,tmp_upd: $tmp_upd);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
        }


        $tmp_upd = $this->tmp_upd_calle(tmp: $tmp,tmp_upd: $tmp_upd);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al asignar tmp_upd', data: $tmp_upd);
        }

        $tmp_upd = $this->tmp_upd_colonia_postal(tmp: $tmp, tmp_upd: $tmp_upd);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
        }

        $tmp_upd = $this->tmp_upd_calle_pertenece(tmp: $tmp, tmp_upd: $tmp_upd);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
        }
        return $tmp_upd;
    }

    private function update_regenera(stdClass $tmp, int $com_tmp_cte_dp_id){
        $tmp_upd = $this->tmp_upd_data(tmp: $tmp);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar si existe', data: $tmp_upd);
        }

        $upd = $this->modifica_bd(registro: $tmp_upd,id: $com_tmp_cte_dp_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al regenerar',data:  $upd);
        }
        return $upd;
    }

    /**
     * Actualiza los datos de un cliente
     * @param stdClass $tmp registro temporal
     * @return array|stdClass
     * @version 17.20.0
     */
    private function upd_cliente(stdClass $tmp): array|stdClass
    {
        $keys = array('dp_calle_pertenece_id','com_cliente_id');
        $valida = $this->validacion->valida_ids(keys: $keys,registro:  $tmp);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al valida tmp',data:  $valida);
        }
        $com_cliente_ins['dp_calle_pertenece_id'] = $tmp->dp_calle_pertenece_id;
        $r_com_cliente = (new com_cliente(link: $this->link))->modifica_bd(registro: $com_cliente_ins,
            id: $tmp->com_cliente_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar com_cliente',data:  $r_com_cliente);
        }
        return $r_com_cliente;
    }

    private function ajusta_cliente_regeneracion(int $com_tmp_cte_dp_id, stdClass $tmp){
        $r_com_cliente = $this->upd_cliente(tmp: $tmp);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al actualizar com_cliente',data:  $r_com_cliente);
        }
        $del = $this->elimina_bd(id: $com_tmp_cte_dp_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar temporal',data:  $del);
        }
        return $del;
    }

    private function ajusta_data_cliente(int $com_tmp_cte_dp_id, stdClass $tmp){
        $keys = array();
        $keys[] = 'dp_pais_id';
        $keys[] = 'dp_estado_id';
        $keys[] = 'dp_municipio_id';
        $keys[] = 'dp_cp_id';
        $keys[] = 'dp_colonia_id';
        $keys[] = 'dp_calle_id';
        $keys[] = 'dp_colonia_postal_id';
        $keys[] = 'dp_calle_pertenece_id';


        $existe_full = $this->existe_data_key(keys: $keys,tmp: $tmp);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar si existe data', data: $existe_full);
        }


        if($existe_full){
            $regenera_cte = $this->ajusta_cliente_regeneracion(com_tmp_cte_dp_id: $com_tmp_cte_dp_id, tmp: $tmp);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al eliminar temporal',data:  $regenera_cte);
            }
        }

        return $existe_full;

    }

    private function data_tmp(stdClass $data_tmp, array $filtro){
        $existe_com_tmp_cte_dp = $this->existe(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar com_tmp', data: $existe_com_tmp_cte_dp);
        }

        if($existe_com_tmp_cte_dp) {
            $data_tmp = $this->get_tmp(filtro: $filtro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener com_tmp', data: $data_tmp);
            }
        }
        return $data_tmp;
    }

    private function genera_data_tmp(stdClass $data_tmp, array $filtro){
        $data_tmp = $this->data_tmp(data_tmp: $data_tmp,filtro:  $filtro);
        if (errores::$error) {
            return $this->error->error(
                mensaje: 'Error al obtener com_tmp', data: $data_tmp);
        }

        $regenera = $this->regenera($data_tmp->com_tmp_cte_dp->id);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al regenerar com_tmp', data: $regenera);
        }

        $data_tmp = $this->data_tmp(data_tmp: $data_tmp,filtro:  $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al obtener com_tmp', data: $data_tmp);
        }
        return $data_tmp;
    }

    private function get_tmp(array $filtro){
        $r_com_tmp_cte_dp = $this->filtro_and(columnas_en_bruto: true, filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(
                mensaje: 'Error al obtener com_tmp', data: $r_com_tmp_cte_dp);
        }
        $data = new stdClass();
        $data->existe_dom_tmp = true;
        $data->com_tmp_cte_dp = (object)$r_com_tmp_cte_dp->registros[0];;
        return $data;
    }

    /**
     * Inicializa las datos temporales de un cliente
     * @return stdClass
     */
    private function init_data_tmp(): stdClass
    {
        $data_tmp = new stdClass();
        $data_tmp->com_tmp_cte_dp = new stdClass();
        $data_tmp->existe_dom_tmp = false;
        return $data_tmp;
    }

    final public function regenera(int $com_tmp_cte_dp_id){
        $tmp = $this->registro(registro_id: $com_tmp_cte_dp_id, columnas_en_bruto: true, retorno_obj: true);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al obtener tmp',data:  $tmp);
        }

        $upd = $this->update_regenera(tmp: $tmp,com_tmp_cte_dp_id: $com_tmp_cte_dp_id);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al regenerar',data:  $upd);
        }

        $regenera_cte = $this->ajusta_data_cliente(com_tmp_cte_dp_id: $com_tmp_cte_dp_id, tmp: $tmp);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar temporal',data:  $regenera_cte);
        }

        $data = new stdClass();
        $data->upd = $upd;
        $data->regenera_cte = $regenera_cte;
        return $data;
    }

    private function regenera_base_tmp(stdClass $data_tmp, array $filtro){
        $existe_com_tmp_cte_dp = $this->existe(filtro: $filtro);
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al validar com_tmp', data: $existe_com_tmp_cte_dp);
        }

        if($existe_com_tmp_cte_dp) {
            $data_tmp = $this->genera_data_tmp(data_tmp: $data_tmp,filtro:  $filtro);
            if (errores::$error) {
                return $this->error->error(mensaje: 'Error al obtener com_tmp', data: $data_tmp);
            }
        }
        return $data_tmp;
    }

    final public  function genera_datos(int $com_cliente_id){
        $filtro['com_tmp_cte_dp.com_cliente_id'] = $com_cliente_id;

        $data_tmp = $this->init_data_tmp();
        if (errores::$error) {
            return $this->error->error(mensaje: 'Error al inicializa data_tmp', data: $data_tmp);
        }

        $data_tmp = $this->regenera_base_tmp(data_tmp: $data_tmp,filtro:  $filtro);
        if (errores::$error) {
            return $this->error->error(
                mensaje: 'Error al obtener com_tmp', data: $data_tmp);
        }
        return $data_tmp;
    }


}