<?php
namespace gamboamartin\comercial\models;
use base\orm\_modelo_parent;
use gamboamartin\errores\errores;
use PDO;
use stdClass;

class com_prospecto extends _modelo_parent{
    public function __construct(PDO $link, array $childrens = array()){
        $tabla = 'com_prospecto';
        $columnas = array($tabla=>false,'com_tipo_prospecto'=>$tabla,'com_agente'=>$tabla,
            'com_tipo_agente'=>'com_agente');
        $campos_obligatorios = array('com_tipo_prospecto_id','com_agente_id');

        $columnas_extra = array();

        $atributos_criticos = array('nombre','apellido_paterno','apellido_materno','telefono','correo','razon_social',
            'com_tipo_prospecto_id','com_agente_id');

        parent::__construct(link: $link, tabla: $tabla, campos_obligatorios: $campos_obligatorios,
            columnas: $columnas, columnas_extra: $columnas_extra, childrens: $childrens,
            atributos_criticos: $atributos_criticos);

        $this->NAMESPACE = __NAMESPACE__;

        $this->etiqueta = 'Prospectos';


    }

    public function alta_bd(array $keys_integra_ds = array('codigo', 'descripcion')): array|stdClass
    {
        $keys = array('nombre','apellido_paterno');
        $valida = $this->validacion->valida_existencia_keys(keys: $keys,registro:  $this->registro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al validar registro',data:  $valida);
        }

        if(!isset($this->registro['apellido_materno'])){
            $this->registro['apellido_materno'] = '';
        }

        if(!isset($this->registro['descripcion'])){
            $descripcion = $this->descripcion(registro: $this->registro);
            if(errores::$error){
                return $this->error->error(mensaje: 'Error al obtener descripcion',data:  $descripcion);
            }
            $this->registro['descripcion'] = $descripcion;
        }
        $r_alta_bd = parent::alta_bd(keys_integra_ds: $keys_integra_ds); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar',data:  $r_alta_bd);
        }

        $com_prospecto_id = $r_alta_bd->registro_id;

        $com_rel_agente_ins['com_prospecto_id'] = trim((int)$com_prospecto_id);
        $com_rel_agente_ins['com_agente_id'] = trim((int)$r_alta_bd->registro_puro->com_agente_id);
        $alta_com_rel_agente = (new com_rel_agente(link: $this->link))->alta_registro(registro: $com_rel_agente_ins);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al insertar alta_com_rel_agente',data:  $alta_com_rel_agente);
        }

        return $r_alta_bd;
    }

    private function descripcion(array $registro): string
    {
        $descripcion = $registro['nombre'].' ';
        $descripcion .= $registro['apellido_paterno'].' ';
        $descripcion .= $registro['apellido_materno'];
        return trim($descripcion);
    }

    public function elimina_bd(int $id): array|stdClass
    {
        $filtro['com_prospecto.id'] = $id;
        $del = (new com_rel_agente(link: $this->link))->elimina_con_filtro_and(filtro: $filtro);
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar com_prospecto',data:  $del);
        }

        $r_del_bd = parent::elimina_bd(id: $id); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->error->error(mensaje: 'Error al eliminar',data:  $r_del_bd);
        }
        return $r_del_bd;
    }
}