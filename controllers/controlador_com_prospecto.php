<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\comercial\controllers;

use base\controller\init;
use gamboamartin\comercial\models\com_prospecto;
use gamboamartin\comercial\models\com_prospecto_etapa;
use gamboamartin\errores\errores;
use gamboamartin\proceso\html\pr_etapa_proceso_html;
use gamboamartin\template\html;
use html\com_agente_html;
use html\com_prospecto_html;
use html\com_tipo_prospecto_html;
use PDO;
use stdClass;
use Throwable;

class controlador_com_prospecto extends _base_sin_cod {

    public array|stdClass $keys_selects = array();
    public string $link_alta_etapa = '';

    public array $etapas = array();

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){
        $modelo = new com_prospecto(link: $link);
        $html_ = new com_prospecto_html(html: $html);
        parent::__construct(html_: $html_,link:  $link,modelo:  $modelo, paths_conf: $paths_conf);


    }
    protected function campos_view(array $inputs = array()): array
    {
        $keys = new stdClass();
        $keys->inputs = array('codigo','descripcion','nombre','apellido_paterno','apellido_materno','telefono',
            'correo','razon_social');
        $keys->selects = array();

        $init_data = array();
        $init_data['com_tipo_prospecto'] = "gamboamartin\\comercial";
        $init_data['com_agente'] = "gamboamartin\\comercial";
        $campos_view = $this->campos_view_base(init_data: $init_data,keys:  $keys);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $campos_view);
        }

        return $campos_view;
    }

    public function convierte_en_cliente(bool $header, bool $ws = false): array|stdClass
    {

        $convierte_en_cliente = (new com_prospecto(link: $this->link))->convierte_en_cliente(com_prospecto_id: $this->registro_id);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al convertir en cliente',data:$convierte_en_cliente,header:  $header,ws:  $ws);
        }
        if($header){

            $this->retorno_base(registro_id: -1, result: $convierte_en_cliente, siguiente_view: 'lista',
                ws:  $ws,seccion_retorno: $this->seccion, valida_permiso: true);
        }
        if($ws){
            header('Content-Type: application/json');
            try {
                echo json_encode($convierte_en_cliente, JSON_THROW_ON_ERROR);
            }
            catch (Throwable $e){
                $error = (new errores())->error(mensaje: 'Error al maquetar JSON' , data: $e);
                print_r($error);
            }
            exit;
        }

        return $convierte_en_cliente;
    }

    public function etapa(bool $header, bool $ws = false): array|stdClass
    {
        $keys_selects = array();
        $template = parent::modifica(header: false,keys_selects:  $keys_selects); // TODO: Change the autogenerated stub
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar template',data:  $template, header: $header,ws:  $ws);
        }


        $filtro = array();
        $filtro['pr_proceso.descripcion'] = 'PROSPECCION';
        $columns_ds[] = 'pr_etapa_descripcion';

        $pr_etapa_proceso_id = (new pr_etapa_proceso_html(html: $this->html_base))->select_pr_etapa_proceso_id(
            cols: 12, con_registros: true, id_selected: -1, link: $this->link, columns_ds: $columns_ds,
            filtro: $filtro, label: 'Etapa');
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al obtener selector de etapa',data:  $pr_etapa_proceso_id, header: $header,ws:  $ws);
        }

        $this->inputs->pr_etapa_proceso_id = $pr_etapa_proceso_id;
        $hoy = date('Y-m-d');
        $fecha = $this->html->input_fecha(cols: 12,row_upd:  new stdClass(),value_vacio:  false,value: $hoy);
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar input fecha',data:  $fecha, header: $header,ws:  $ws);
        }

        $this->inputs->fecha = $fecha;

        $link_alta_etapa = $this->obj_link->link_con_id(
            accion: 'etapa_bd',link: $this->link,registro_id: $this->registro_id,seccion: $this->tabla);
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar link',data:  $link_alta_etapa, header: $header,ws:  $ws);
        }


        $this->link_alta_etapa = $link_alta_etapa;

        $etapas = (new com_prospecto(link: $this->link))->etapas(com_prospecto_id: $this->registro_id);
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al obtener etapas',data:  $etapas, header: $header,ws:  $ws);
        }

        $this->etapas = $etapas;



        return $template;
    }

    public function etapa_bd(bool $header, bool $ws = false): array|stdClass
    {

        $this->link->beginTransaction();


        $com_prospecto_etapa_ins['com_prospecto_id'] = $this->registro_id;
        $com_prospecto_etapa_ins['pr_etapa_proceso_id'] = $_POST['pr_etapa_proceso_id'];
        $com_prospecto_etapa_ins['fecha'] = $_POST['fecha'];

        $r_alta_com_prospecto_etapa = (new com_prospecto_etapa(link: $this->link))->alta_registro(registro: $com_prospecto_etapa_ins);
        if(errores::$error){
            $this->link->rollBack();
            $this->retorno_error(mensaje: 'Error al insertar com_prospecto_etapa',data:  $r_alta_com_prospecto_etapa, header: $header,ws:  $ws);
        }
        $this->link->commit();

        if($header){

            $this->retorno_base(registro_id: $this->registro_id, result: $r_alta_com_prospecto_etapa, siguiente_view: 'etapa',
                ws:  $ws,seccion_retorno: $this->seccion, valida_permiso: true);
        }
        if($ws){
            header('Content-Type: application/json');
            try {
                echo json_encode($r_alta_com_prospecto_etapa, JSON_THROW_ON_ERROR);
            }
            catch (Throwable $e){
                $error = (new errores())->error(mensaje: 'Error al maquetar JSON' , data: $e);
                print_r($error);
            }
            exit;
        }



        return $r_alta_com_prospecto_etapa;
    }

    public function init_datatable(): stdClass
    {
        $datatables = new stdClass();
        $datatables->columns = array();
        $datatables->columns['com_prospecto_id']['titulo'] = 'Id';
        $datatables->columns['com_prospecto_descripcion']['titulo'] = 'Prospecto';


        $datatables->filtro = array();
        $datatables->filtro[] = 'com_prospecto.id';
        $datatables->filtro[] = 'com_prospecto.descripcion';

        return $datatables;
    }


    protected function key_selects_txt(array $keys_selects): array
    {
        $keys_selects = (new init())->key_select_txt(cols: 4,key: 'codigo',
            keys_selects:$keys_selects, place_holder: 'Cod');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 8,key: 'descripcion',
            keys_selects:$keys_selects, place_holder: 'Tipo Agente');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'nombre',
            keys_selects:$keys_selects, place_holder: 'Nombre');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'apellido_paterno',
            keys_selects:$keys_selects, place_holder: 'AP');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'apellido_materno',
            keys_selects:$keys_selects, place_holder: 'AM');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'telefono',
            keys_selects:$keys_selects, place_holder: 'Tel');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'correo',
            keys_selects:$keys_selects, place_holder: 'Correo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }
        $keys_selects = (new init())->key_select_txt(cols: 6,key: 'razon_social',
            keys_selects:$keys_selects, place_holder: 'Razon Social');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        return $keys_selects;
    }

    public function modifica(bool $header, bool $ws = false, array $keys_selects = array()): array|stdClass
    {
        $template = parent::modifica(header: false,keys_selects:  $keys_selects); // TODO: Change the autogenerated stub
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar template',data:  $template, header: $header,ws:  $ws);
        }

        //print_r($this->registro);exit;

        $com_agente_id = (new com_agente_html(html: $this->html_base))->select_com_agente_id(
            cols: 12,con_registros: true,id_selected: $this->registro['com_agente_id'],link: $this->link);
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar com_tipo_agente_id',data:  $com_agente_id, header: $header,ws:  $ws);
        }
        $this->inputs->com_agente_id = $com_agente_id;

        $com_tipo_prospecto_id = (new com_tipo_prospecto_html(html: $this->html_base))->select_com_tipo_prospecto_id(
            cols: 12,con_registros: true,id_selected: $this->registro['com_tipo_prospecto_id'],link: $this->link);
        if(errores::$error){
            $this->retorno_error(mensaje: 'Error al generar com_tipo_prospecto_id',data:  $com_agente_id, header: $header,ws:  $ws);
        }
        $this->inputs->com_tipo_prospecto_id = $com_tipo_prospecto_id;
        return $template;
    }


}
