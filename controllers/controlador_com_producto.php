<?php
/**
 * @author Martin Gamboa Vazquez
 * @version 1.0.0
 * @created 2022-05-14
 * @final En proceso
 *
 */
namespace gamboamartin\comercial\controllers;

use gamboamartin\cat_sat\models\cat_sat_obj_imp;
use gamboamartin\cat_sat\models\cat_sat_producto;
use gamboamartin\cat_sat\models\cat_sat_unidad;
use gamboamartin\comercial\models\com_producto;
use gamboamartin\comercial\models\com_tipo_producto;
use gamboamartin\comercial\models\com_tmp_prod_cs;
use gamboamartin\errores\errores;
use gamboamartin\system\links_menu;
use gamboamartin\template\html;
use html\com_producto_html;
use html\com_tmp_prod_cs_html;
use PDO;
use stdClass;

class controlador_com_producto extends _base_comercial {

    public array|stdClass $keys_selects = array();

    public function __construct(PDO $link, html $html = new \gamboamartin\template_1\html(),
                                stdClass $paths_conf = new stdClass()){
        $modelo = new com_producto(link: $link);
        $html = new com_producto_html(html: $html);
        $obj_link = new links_menu(link: $link,registro_id: $this->registro_id);

        $datatables = $this->init_datatable();
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al inicializar datatable',data: $datatables);
            print_r($error);
            die('Error');
        }

        parent::__construct(html:$html, link: $link,modelo:  $modelo, obj_link: $obj_link, datatables: $datatables,
            paths_conf: $paths_conf);

        $this->titulo_lista = 'Productos';

        $propiedades = $this->inicializa_propiedades();
        if(errores::$error){
            $error = $this->errores->error(mensaje: 'Error al inicializar propiedades',data:  $propiedades);
            print_r($error);
            die('Error');
        }

        $this->parents_verifica[] = (new cat_sat_producto(link: $this->link));
        $this->parents_verifica[] = (new cat_sat_unidad(link: $this->link));
        $this->parents_verifica[] = (new cat_sat_obj_imp(link: $this->link));
        $this->parents_verifica[] = (new com_tipo_producto(link: $this->link));

        $this->verifica_parents_alta = true;
    }


    public function alta(bool $header, bool $ws = false): array|string
    {
        $r_alta = parent::alta($header, $ws); // TODO: Change the autogenerated stub
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener template',data:  $r_alta, header: $header,ws:  $ws);
        }

        $cat_sat_producto = (new com_tmp_prod_cs_html(html: $this->html_base))->input_cat_sat_producto(
            cols: 12, row_upd: $this->row_upd, value_vacio: false, disabled: true);

        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al obtener input',data:  $cat_sat_producto, header: $header,ws:  $ws);
        }

        $this->inputs->cat_sat_producto = $cat_sat_producto;


        return $r_alta;

    }

    final public function aplica_predial(bool $header, bool $ws): array|stdClass
    {
        $en_transaccion = false;
        if($this->link->inTransaction()){
            $en_transaccion = true;
        }

        if(!$en_transaccion){
            $this->link->beginTransaction();
        }

        $upd = $this->row_upd(key: __FUNCTION__);
        if(errores::$error){
            $this->link->rollBack();
            return $this->retorno_error(mensaje: 'Error al obtener row upd',data:  $upd, header: $header,ws:  $ws);
        }
        $this->link->commit();

        $_SESSION[$upd->salida][]['mensaje'] = $upd->mensaje.' del id '.$this->registro_id;
        $this->header_out(result: $upd, header: $header,ws:  $ws);

        return $upd;
    }



    public function get_productos(bool $header, bool $ws = true): array|stdClass
    {
        $keys['com_tipo_producto'] = array('id','descripcion','codigo','codigo_bis');

        $salida = $this->get_out(header: $header,keys: $keys, ws: $ws);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar salida',data:  $salida,header: $header,ws: $ws);
        }

        return $salida;
    }

    protected function campos_view(): array
    {
        $keys = new stdClass();
        $keys->inputs = array('codigo','descripcion');
        $keys->selects = array();

        $init_data = array();
        $init_data['cat_sat_tipo_producto'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_division_producto'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_grupo_producto'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_clase_producto'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_producto'] = "gamboamartin\\cat_sat";
        $init_data['com_tipo_producto'] = "gamboamartin\\comercial";
        $init_data['cat_sat_unidad'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_obj_imp'] = "gamboamartin\\cat_sat";
        $init_data['cat_sat_conf_imps'] = "gamboamartin\\cat_sat";
        $campos_view = $this->campos_view_base(init_data: $init_data,keys:  $keys);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar campo view',data:  $campos_view);
        }

        return $campos_view;
    }


    public function key_selects_txt(array $keys_selects): array
    {
        $r_alta = $this->init_alta();
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar alta',data:  $r_alta);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_tipo_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'SAT - Tipo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: false,filtro:  array(), key: 'cat_sat_division_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'SAT - División');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: false,filtro:  array(), key: 'cat_sat_grupo_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'SAT - Grupo');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: false,filtro:  array(), key: 'cat_sat_clase_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'SAT - Clase');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:12, con_registros: false,filtro:  array(), key: 'cat_sat_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'SAT - Producto');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'com_tipo_producto_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Tipo Producto');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_unidad_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Unidad');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:6, con_registros: true,filtro:  array(), key: 'cat_sat_obj_imp_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Objeto del Impuesto');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = $this->key_select(cols:12, con_registros: true,filtro:  array(), key: 'cat_sat_conf_imps_id',
            keys_selects: $keys_selects, id_selected: -1, label: 'Conf de Impuestos');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new \base\controller\init())->key_select_txt(cols: 6,key: 'codigo',
            keys_selects:$keys_selects, place_holder: 'Cod');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }

        $keys_selects = (new \base\controller\init())->key_select_txt(cols: 12,key: 'descripcion',
            keys_selects:$keys_selects, place_holder: 'Producto');
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al maquetar key_selects',data:  $keys_selects);
        }



        return $keys_selects;
    }

    /**
     * @return stdClass
     * @version 4.40.3
     */
    final public function init_datatable(): stdClass
    {
        $columns["com_producto_id"]["titulo"] = "Id";
        $columns["com_producto_codigo"]["titulo"] = "Código";
        $columns["cat_sat_producto_codigo"]["titulo"] = "Código SAT";
        $columns["cat_sat_producto_descripcion"]["titulo"] = "SAT Producto";
        $columns["cat_sat_unidad_descripcion"]["titulo"] = "SAT Unidad";
        $columns["cat_sat_obj_imp_descripcion"]["titulo"] = "SAT ObjetoImp";
        $columns["com_producto_descripcion"]["titulo"] = "Producto";

        $filtro = array("com_producto.id","com_producto.codigo", "com_producto.descripcion",'cat_sat_producto.codigo');

        $datatables = new stdClass();
        $datatables->columns = $columns;
        $datatables->filtro = $filtro;

        return $datatables;
    }

    /**
     * Asigna las propiedades de inputs de productos
     * @return array
     * @version 6.0.0
     */
    private function inicializa_propiedades(): array
    {
        $identificador = "cat_sat_tipo_producto_id";
        $propiedades = array("label" => "SAT - Tipo");
        $pr = $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_division_producto_id";
        $propiedades = array("label" => "SAT - División", "con_registros" => false);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }


        $identificador = "cat_sat_grupo_producto_id";
        $propiedades = array("label" => "SAT - Grupo", "con_registros" => false);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_clase_producto_id";
        $propiedades = array("label" => "SAT - Clase", "con_registros" => false);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_producto_id";
        $propiedades = array("label" => "SAT - Producto", "con_registros" => false, "cols" => 12);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_unidad_id";
        $propiedades = array("label" => "SAT - Unidad",  "cols" => 12);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_obj_imp_id";
        $propiedades = array("label" => "Objeto del Impuesto", "cols" => 12);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "com_tipo_producto_id";
        $propiedades = array("label" => "Tipo Producto", "cols" => 8);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "cat_sat_conf_imps_id";
        $propiedades = array("label" => "Conf Impuestos", "cols" => 12);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "codigo";
        $propiedades = array("place_holder" => "Código", "cols" => 4);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        $identificador = "descripcion";
        $propiedades = array("place_holder" => "Producto", "cols" => 12);
        $pr =$this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializa',data:  $pr);
        }

        return $this->keys_selects;
    }

    public function modifica(bool $header, bool $ws = false): array|stdClass
    {
        $r_modifica =  parent::modifica(header: false);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al generar template',data:  $r_modifica, header: $header,ws:$ws);
        }

        $filtro['com_producto.id'] = $this->registro_id;

        $existe_tmp = (new com_tmp_prod_cs(link: $this->link))->existe(filtro: $filtro);
        if(errores::$error){
            return $this->retorno_error(mensaje: 'Error al validar si existe',data:  $existe_tmp, header: $header, ws: $ws);
        }

        $producto = (new cat_sat_producto($this->link))->get_producto($this->row_upd->cat_sat_producto_id);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al obtener $producto',data:  $producto);
        }

        $identificador = "cat_sat_tipo_producto_id";
        $propiedades = array("id_selected" => $producto['cat_sat_tipo_producto_id']);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_division_producto_id";
        $propiedades = array("id_selected" => $producto['cat_sat_division_producto_id'], "con_registros" => true,
            "filtro" => array('cat_sat_tipo_producto.id' => $producto['cat_sat_tipo_producto_id']));
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_grupo_producto_id";
        $propiedades = array("id_selected" => $producto['cat_sat_grupo_producto_id'], "con_registros" => true,
            "filtro" => array('cat_sat_division_producto.id' => $producto['cat_sat_division_producto_id']));
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_clase_producto_id";
        $propiedades = array("id_selected" => $producto['cat_sat_clase_producto_id'], "con_registros" => true,
            "filtro" => array('cat_sat_grupo_producto.id' => $producto['cat_sat_grupo_producto_id']));
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_producto_id";
        $propiedades = array("id_selected" => $this->row_upd->cat_sat_producto_id, "con_registros" => true,
            "filtro" => array('cat_sat_clase_producto.id' => $producto['cat_sat_clase_producto_id']), 'cols'=>6);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_unidad_id";
        $propiedades = array("id_selected" => $this->row_upd->cat_sat_unidad_id);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_obj_imp_id";
        $propiedades = array("id_selected" => $this->row_upd->cat_sat_obj_imp_id);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "com_tipo_producto_id";
        $propiedades = array("id_selected" => $this->row_upd->com_tipo_producto_id);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $identificador = "cat_sat_conf_imps_id";
        $propiedades = array("id_selected" => $this->row_upd->cat_sat_conf_imps_id);
        $this->asignar_propiedad(identificador:$identificador, propiedades: $propiedades);

        $inputs = $this->genera_inputs(keys_selects:  $this->keys_selects);
        if(errores::$error){
            return $this->errores->error(mensaje: 'Error al inicializar inputs',data:  $inputs);
        }



        $cat_sat_producto = '';


        if($existe_tmp){

            $r_com_tmp_prod_cs = (new com_tmp_prod_cs(link: $this->link))->filtro_and(filtro: $filtro);
            if(errores::$error){
                return $this->errores->error(mensaje: 'Error al obtener',data:  $r_com_tmp_prod_cs);
            }

            $this->inputs->cat_sat_division_producto_id = '';
            $this->inputs->cat_sat_grupo_producto_id = '';
            $this->inputs->cat_sat_clase_producto_id = '';
            $this->inputs->cat_sat_producto_id = '';


            $this->row_upd->cat_sat_producto = $r_com_tmp_prod_cs->registros[0]['com_tmp_prod_cs_cat_sat_producto'];

            $cat_sat_producto = (new com_tmp_prod_cs_html(html: $this->html_base))->input_cat_sat_producto(
                cols: 12, row_upd: $this->row_upd, value_vacio: false, disabled: true);

            if(errores::$error){
                return $this->retorno_error(mensaje: 'Error al obtener input',data:  $cat_sat_producto, header: $header,ws:  $ws);
            }

        }

        $this->inputs->cat_sat_producto = $cat_sat_producto;


        return $r_modifica;
    }

}
